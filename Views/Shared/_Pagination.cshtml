@* 
    _Pagination.cshtml
    This partial view is responsible for rendering pagination controls for a list of items.
    It uses the PaginationInfo model to display page numbers and navigation links.
    The view includes logic to handle ellipsis for large numbers of pages.
*@
@using Sprint2.Models
@model PaginationInfo

@if (Model.TotalPages > 1)
{
    <div class="card mt-4">
        <div class="card-body py-3">
            <nav aria-label="Navegación de páginas">
                <ul class="pagination pagination-md justify-content-center mb-0">
                    <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage - 1 })" aria-label="Anterior">
                            <i class="bi bi-chevron-left"></i>
                            <span class="sr-only">Anterior</span>
                        </a>
                    </li>

                    @{
                        // Mostrar un número limitado de páginas con elipsis
                        const int maxPagesToShow = 5;
                        int startPage = Math.Max(1, Model.CurrentPage - maxPagesToShow / 2);
                        int endPage = Math.Min(Model.TotalPages, startPage + maxPagesToShow - 1);

                        if (startPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = 1 })">1</a>
                            </li>
                            if (startPage > 2)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                        }

                        for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                            </li>
                        }

                        if (endPage < Model.TotalPages)
                        {
                            if (endPage < Model.TotalPages - 1)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = Model.TotalPages })">@Model.TotalPages</a>
                            </li>
                        }
                    }

                    <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage + 1 })" aria-label="Siguiente">
                            <i class="bi bi-chevron-right"></i>
                            <span class="sr-only">Siguiente</span>
                        </a>
                    </li>
                </ul>
            </nav>
            <div class="text-center text-muted mt-2">
                <small>
                    <i class="bi bi-info-circle me-1"></i>
                    Mostrando página <strong>@Model.CurrentPage</strong> de <strong>@Model.TotalPages</strong> 
                    (Total: <strong>@Model.TotalItems</strong> tareas)
                </small>
            </div>
        </div>
    </div>
}
