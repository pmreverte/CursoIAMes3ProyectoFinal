@{
    Layout = "_Layout";
    ViewData["Title"] = "Gestión de Tareas";
    bool loadTasksAsync = ViewBag.LoadTasksAsync ?? false;
}
@model TaskListViewModel
@using Sprint2.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<div class="container">
    @Html.AntiForgeryToken()
    
    <div class="row mb-4">
        <div class="col-md-6">
            <h1 class="display-5 fw-bold">
                <i class="bi bi-list-check me-2"></i>Mis Tareas
            </h1>
            <p class="text-muted">Gestiona tus tareas de forma eficiente</p>
        </div>
        <div class="col-md-6 text-md-end d-flex align-items-center justify-content-md-end">
            <a asp-action="Create" class="btn btn-primary btn-lg">
                <i class="bi bi-plus-circle me-2"></i>Nueva Tarea
            </a>
        </div>
    </div>

    @await Html.PartialAsync("_Notifications")

    @await Html.PartialAsync("_DebugInfo")

    @await Html.PartialAsync("_Filters", Model.Filter)
    
    <!-- Indicador de carga global -->
    <div id="globalLoadingIndicator" class="text-center py-5 @(loadTasksAsync ? "" : "d-none")">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando tareas...</span>
        </div>
        <p class="mt-3">Cargando tareas...</p>
    </div>

    <div id="tasksContainer" class="@(loadTasksAsync ? "d-none" : "")">
        
        @if (!Model.Tasks.Any())
        {
            <div class="card mb-4">
                <div class="card-body text-center py-5">
                    <i class="bi bi-search display-1 text-muted mb-3"></i>
                    <h3>No se encontraron tareas</h3>
                    <p class="text-muted mb-4">No hay tareas que coincidan con los criterios de búsqueda.</p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-2"></i>Crear Nueva Tarea
                    </a>
                </div>
            </div>
        }
        else
        {
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="btn-group" role="group" aria-label="Vista de tareas">
                    <a href="#" class="btn btn-outline-secondary" id="cardViewBtn">
                        <i class="bi bi-grid me-1"></i>Tarjetas
                    </a>
                    <a href="#" class="btn btn-outline-secondary" id="listViewBtn">
                        <i class="bi bi-list-ul me-1"></i>Lista
                    </a>
                    <a href="#" class="btn btn-outline-secondary active" id="kanbanViewBtn">
                        <i class="bi bi-kanban me-1"></i>Kanban
                    </a>
                </div>
            </div>
            <div class="col-md-6 text-md-end">
                <div class="dropdown d-inline-block">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="sortDropdown" 
                            data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-sort-down me-1"></i>Ordenar
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="sortDropdown">
                        <li><a class="dropdown-item" href="#"><i class="bi bi-calendar-date me-2"></i>Fecha de creación</a></li>
                        <li><a class="dropdown-item" href="#"><i class="bi bi-calendar-check me-2"></i>Fecha de vencimiento</a></li>
                        <li><a class="dropdown-item" href="#"><i class="bi bi-flag me-2"></i>Prioridad</a></li>
                        <li><a class="dropdown-item" href="#"><i class="bi bi-check-circle me-2"></i>Estado</a></li>
                    </ul>
                </div>
            </div>
        </div>

        <div id="cardView" class="view-container">
            <div class="row">
                @foreach (var task in Model.Tasks)
                {
                    <div class="col-md-6 col-lg-4 mb-4 task-item" data-task-id="@task.Id">
                        @await Html.PartialAsync("_TaskCard", task)
                    </div>
                }
            </div>
        </div>

        <div id="listView" class="view-container">
            <div class="card mb-4">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Descripción</th>
                                <th>Estado</th>
                                <th>Prioridad</th>
                                <th>Vencimiento</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var task in Model.Tasks)
                            {
                                <tr class="@(task.IsOverdue ? "table-danger" : "")" data-task-id="@task.Id">
                                    <td>
                                        <div class="fw-bold">@task.Description</div>
                                        @if (!string.IsNullOrEmpty(task.Category))
                                        {
                                            <span class="badge bg-info">@task.Category</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @(task.Status switch {
                                            TodoTaskStatus.Pending => "bg-warning text-dark",
                                            TodoTaskStatus.InProgress => "bg-primary",
                                            TodoTaskStatus.Completed => "bg-success",
                                            _ => "bg-secondary"
                                        })">@task.Status</span>
                                    </td>
                                    <td>
                                        <span class="badge @(task.Priority switch {
                                            Priority.Low => "bg-success",
                                            Priority.Medium => "bg-warning text-dark",
                                            Priority.High => "bg-danger",
                                            Priority.Urgent => "bg-danger",
                                            _ => "bg-secondary"
                                        })">@task.Priority</span>
                                    </td>
                                    <td>
                                        @if (task.DueDate.HasValue)
                                        {
                                            <span class="@(task.IsOverdue ? "text-danger" : "")">
                                                @task.DueDate.Value.ToLocalTime().ToString("d")
                                                @if (task.IsOverdue)
                                                {
                                                    <i class="bi bi-exclamation-triangle-fill ms-1" 
                                                       data-bs-toggle="tooltip" title="¡Tarea vencida!"></i>
                                                }
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            @if (task.Status != TodoTaskStatus.Completed)
                                            {
                                                <button type="button" class="btn btn-success quick-status-change" 
                                                        data-task-id="@task.Id" data-status="@((int)TodoTaskStatus.Completed)"
                                                        data-bs-toggle="tooltip" title="Marcar como completada">
                                                    <i class="bi bi-check-lg"></i>
                                                </button>
                                            }
                                            @if (task.Status == TodoTaskStatus.Pending)
                                            {
                                                <button type="button" class="btn btn-primary quick-status-change" 
                                                        data-task-id="@task.Id" data-status="@((int)TodoTaskStatus.InProgress)"
                                                        data-bs-toggle="tooltip" title="Iniciar tarea">
                                                    <i class="bi bi-play-fill"></i>
                                                </button>
                                            }
                                            <a href="@Url.Action("Edit", "Tasks", new { id = task.Id })" class="btn btn-secondary"
                                               data-bs-toggle="tooltip" title="Editar tarea">
                                                <i class="bi bi-pencil-square"></i>
                                            </a>
                                            <a href="@Url.Action("Delete", "Tasks", new { id = task.Id })" class="btn btn-danger"
                                               data-bs-toggle="tooltip" title="Eliminar tarea">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <div id="kanbanView" class="view-container active">
            <div class="row">
                <!-- Columna de tareas pendientes -->
                <div class="col-md-4 mb-4">
                    <div class="task-column task-column-pending" data-status="0">
                        <div class="task-column-header">
                            <h3><i class="bi bi-hourglass me-2"></i>Pendientes</h3>
                            <span class="badge bg-warning text-dark ms-auto task-counter-pending">
                                @Model.Tasks.Count(t => t.Status == TodoTaskStatus.Pending)
                            </span>
                        </div>
                        <div class="task-column-body">
                            @foreach (var task in Model.Tasks.Where(t => t.Status == TodoTaskStatus.Pending))
                            {
                                <div class="task-item" data-task-id="@task.Id">
                                    @await Html.PartialAsync("_TaskCard", task)
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
                <!-- Columna de tareas en progreso -->
                <div class="col-md-4 mb-4">
                    <div class="task-column task-column-in-progress" data-status="1">
                        <div class="task-column-header">
                            <h3><i class="bi bi-play-circle me-2"></i>En Progreso</h3>
                            <span class="badge bg-primary ms-auto task-counter-in-progress">
                                @Model.Tasks.Count(t => t.Status == TodoTaskStatus.InProgress)
                            </span>
                        </div>
                        <div class="task-column-body">
                            @foreach (var task in Model.Tasks.Where(t => t.Status == TodoTaskStatus.InProgress))
                            {
                                <div class="task-item" data-task-id="@task.Id">
                                    @await Html.PartialAsync("_TaskCard", task)
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
                <!-- Columna de tareas completadas -->
                <div class="col-md-4 mb-4">
                    <div class="task-column task-column-completed" data-status="2">
                        <div class="task-column-header">
                            <h3><i class="bi bi-check-circle me-2"></i>Completadas</h3>
                            <span class="badge bg-success ms-auto task-counter-completed">
                                @Model.Tasks.Count(t => t.Status == TodoTaskStatus.Completed)
                            </span>
                        </div>
                        <div class="task-column-body">
                            @foreach (var task in Model.Tasks.Where(t => t.Status == TodoTaskStatus.Completed))
                            {
                                <div class="task-item" data-task-id="@task.Id">
                                    @await Html.PartialAsync("_TaskCard", task)
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

            @await Html.PartialAsync("_Pagination", Model.Pagination)
        }
    </div>
</div>

@section Scripts {
    <!-- Incluir scripts externos -->
    <script src="~/js/taskLoader.js"></script>
    <script src="~/js/viewSwitcher.js"></script>
    <script src="~/js/taskManager.js"></script>
    <script src="~/js/taskInitializer.js"></script>
}
